services:
  redpanda-console:
    image: docker.redpanda.com/redpandadata/console:latest
    container_name: redpanda-console
    ports:
      - "8080:8080"
    environment:
      - KAFKA_BROKERS=kafka:29092
      - KAFKA_SCHEMAREGISTRY_ENABLED=false
      - CONSOLE_TELEMETRY_ENABLED=false
    depends_on:
      kafka:
        condition: service_healthy

  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # port do cliente
      - "9093:9093" # port do controlador interno
      - "29092:29092" # port interno para o console
    environment:
      - KAFKA_KRAFT_MODE=true
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_LISTENERS=PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093,INTERNAL://0.0.0.0:29092
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,INTERNAL://kafka:29092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=INTERNAL
      - KAFKA_CFG_LOG_DIRS=/bitnami/kafka/data
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL", "/opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server=localhost:29092 --list"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 15s


  postgres:
    image: postgres:15
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 12345
      POSTGRES_DB: iot
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      timeout: 5s
      retries: 5


  producer:
    build:
      context: .
      dockerfile: producer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
    healthcheck:
      test: [ "CMD-SHELL", "python -c \"from confluent_kafka import Producer; p=Producer({'bootstrap.servers': 'kafka:29092'}); p.flush()\"" ]
      interval: 10s
      timeout: 5s
      retries: 5


  consumer:
    build:
      context: .
      dockerfile: consumer/Dockerfile
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      producer:
        condition: service_healthy
    environment:
      - BOOTSTRAP_SERVERS=kafka:29092
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=iot
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=12345
    healthcheck:
      test: [ "CMD-SHELL", "python -c \"from confluent_kafka.admin import AdminClient; AdminClient({'bootstrap.servers': 'kafka:29092'}).list_topics(timeout=2.0); from shared.db import conectar_postgres; conectar_postgres()\"" ]
      interval: 10s
      timeout: 5s
      retries: 5

  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8081:8080"
    depends_on:
      - postgres
    healthcheck:
      test: [ "CMD", "wget", "--spider", "--quiet", "http://localhost:8080" ]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 10s




volumes:
  kafka_data:
  pg_data:


